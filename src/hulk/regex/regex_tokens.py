# semi, colon, comma, dot, opar, cpar, ocurly, ccurly, obrack, cbrack = G.Terminals('; : , . ( ) { } [ ]')
# plus, minus, star, div, power, power_star , concat, dobleconcat, arrow, mod = G.Terminals('+ - * / ^ ** @ @@ => %')
# eq, neq, le, leq, gr, greq, eqeq, dest_eq = G.Terminals('= != < <= > >= == :=')
# and_, or_, not_ = G.Terminals('& | !') 
# num_, str_, bool_, id_, let_, in_, is_, as_, if_, elif_, else_, while_, for_, new, type_id = G.Terminals('num str bool id let in is as if elif else while for new type_id')
# func_, type_, inherits_, protocol_, extends_, base_ = G.Terminals('func type inherits protocol extends base')
# bar_bar_ = G.Terminal('||')

from enum import Enum, auto

class TokenType(Enum):
    SEMICOLON = auto()
    COLON = auto()
    COMMA = auto()
    DOT = auto()
    OPAR = auto()
    CPAR = auto()
    OCURLY = auto()
    CCURLY = auto()
    OBRACK = auto()
    CBRACK = auto()
    PLUS = auto()
    MINUS = auto()
    STAR = auto()
    DIV = auto()
    POWER = auto()
    POWER_STAR = auto()
    CONCAT = auto()
    DOUBLE_CONCAT = auto()
    ARROW = auto()
    MOD = auto()
    EQ = auto()
    NEQ = auto()
    LE = auto()
    LEQ = auto()
    GR = auto()
    GEQ = auto()
    EQEQ = auto()
    DEST_EQ = auto()
    AND = auto()
    OR = auto()
    NOT = auto()
    NUM = auto()
    STR = auto()
    BOOL = auto()
    ID = auto()
    LET = auto()
    IN = auto()
    IS = auto()
    AS = auto()
    IF = auto()
    ELIF = auto()
    ELSE = auto()
    WHILE = auto()
    FOR = auto()
    NEW = auto()
    TYPE_ID = auto()
    FUNC = auto()
    TYPE = auto()
    INHERITS = auto()
    PROTOCOL = auto()
    EXTENDS = auto()
    BASE = auto()
    BAR_BAR = auto()
    
    
     